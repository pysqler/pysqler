#+title: PySQLer
#+author: SciPunch

* Description

Fearless SQL queries in your Python project. PySQLer parses SQL queries from the entire project and checks their correctness during execution on the database. It knows how to infer types from the Python side, so it is capable of catching most of the issues before the actual app run.

* How it works

** Component design

#+begin_src plantuml :file ./img/component-design.png
left to right direction

package PySQLer {
  folder "3rd party library" {
    [sqlparse]
    [pytype]
  }

  folder "Database specific" {
    [asyncpg]
    [psycopg3]
  }
}

database DataBase {
}

package Plugins {
  [sqlfluff]
  [sqlformat]
}

PySQLer --> DataBase
PySQLer --> Plugins
#+end_src

#+RESULTS:
[[file:./img/component-design.png]]

** Main algorithm

1. Parse [[https://en.wikipedia.org/wiki/Abstract_syntax_tree][AST]] of each python module (with help of [[https://docs.python.org/3/library/ast.html][ast module]]) and saves all SQL queries with help of [[https://github.com/andialbrecht/sqlparse][sqlparse]]
2. Group queries by existence of bound parameters
3. Resolve SQL library (e.g. [[https://magicstack.github.io/asyncpg/current/][asyncpg]], [[https://www.psycopg.org/][psycopg]], [[https://www.sqlalchemy.org/][sqlalchemy]] and etc)
4. Based on the p.3 infer types of bound parameters (with help of [[https://docs.python.org/3/library/typing.html][typing]])
5. Extract SQL types of fields to which parameters were bounded (by reading database schema)
6. Mock data for the bounded values (by [[https://mimesis.name/master/][mimesis]] or any other fake data provider)
7. Create database with the same schema as in provided one
8. Execute queries and gathers errors
9. Print report

** Additions

*** Plugin system

After [[5. Extrats SQL types of fields to which params were bounded (by reading database schema)][p.5 of main algorithm]] we know the following about each SQL query:

- It's exact position in the file (stored in the AST)
- Bounded parameters types and their mapping to the SQL table's
- Library which is used on a Python side

This information allows us to introduce plugin system which makes possible:

- Do additional linting with ([[https://github.com/jarulraj/sqlcheck][sqlcheck]], [[https://sqlfluff.com/][sqlfluff]] and any other program)
- Format queries in place with formatter of choice

*** Interactive web report

People who don't use GNU Emacs compile or don't live in a terminal can generate web report and get mouse friendly interface to overview analyzed SQL queries, find issues and possible ways to fix them. Highly inspired by [[https://coverage.readthedocs.io/en/7.6.12/index.html][coverage]]'s [[https://nedbatchelder.com/files/sample_coverage_html/index.html][HTML report]]

*** Caching

We hash and store queries with their results by default in the local SQLite database

* Ideas

- Exclude some queries from analysis
- Respect .gitignore
- Mark exceptions that wasn't handled (e.g unique constraint, possible missing foreign key and etc.)
- Predict time or IO consuming SQL queries
